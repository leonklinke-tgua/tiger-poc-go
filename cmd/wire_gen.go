// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"github.com/theguarantors/tiger/api/policy/app"
	"github.com/theguarantors/tiger/api/policy/repository"
	"github.com/theguarantors/tiger/api/policy/service"
	"github.com/theguarantors/tiger/api/user/app"
	"github.com/theguarantors/tiger/api/user/repository"
	"github.com/theguarantors/tiger/api/user/service"
	"github.com/theguarantors/tiger/config"
	"github.com/theguarantors/tiger/routes"
)

// Injectors from wire.go:

func InitializeService() (*routes.ServerHTTP, error) {
	db, err := config.NewDBConnection()
	if err != nil {
		return nil, err
	}
	userRepositoryUserRepository := userRepository.NewUserRepository(db)
	userAppUserApp := userApp.NewUserApp(userRepositoryUserRepository)
	userServiceUserService := userService.NewUserService(userAppUserApp)
	policyRepositoryPolicyRepository := policyRepository.NewPolicyRepository(db)
	policyAppPolicyApp := policyApp.NewPolicyApp(policyRepositoryPolicyRepository, userServiceUserService)
	policyServicePolicyService := policyService.NewPolicyService(policyAppPolicyApp)
	serverHTTP := newServer(userServiceUserService, policyServicePolicyService)
	return serverHTTP, nil
}

// wire.go:

func newServer(userService2 *userService.UserService, policyService2 *policyService.PolicyService,
) *routes.ServerHTTP {

	server := routes.SetupRoutes(userService2, policyService2)

	return server
}
