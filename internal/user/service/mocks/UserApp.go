// Code generated by mockery v2.52.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entities "github.com/theguarantors/tiger/internal/entities"
)

// UserApp is an autogenerated mock type for the UserApp type
type UserApp struct {
	mock.Mock
}

type UserApp_Expecter struct {
	mock *mock.Mock
}

func (_m *UserApp) EXPECT() *UserApp_Expecter {
	return &UserApp_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserApp) CreateUser(ctx context.Context, user *entities.User) (*entities.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.User) (*entities.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.User) *entities.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserApp_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserApp_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *entities.User
func (_e *UserApp_Expecter) CreateUser(ctx interface{}, user interface{}) *UserApp_CreateUser_Call {
	return &UserApp_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *UserApp_CreateUser_Call) Run(run func(ctx context.Context, user *entities.User)) *UserApp_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.User))
	})
	return _c
}

func (_c *UserApp_CreateUser_Call) Return(_a0 *entities.User, _a1 error) *UserApp_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserApp_CreateUser_Call) RunAndReturn(run func(context.Context, *entities.User) (*entities.User, error)) *UserApp_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *UserApp) DeleteUser(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserApp_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type UserApp_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UserApp_Expecter) DeleteUser(ctx interface{}, id interface{}) *UserApp_DeleteUser_Call {
	return &UserApp_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *UserApp_DeleteUser_Call) Run(run func(ctx context.Context, id string)) *UserApp_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserApp_DeleteUser_Call) Return(_a0 error) *UserApp_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserApp_DeleteUser_Call) RunAndReturn(run func(context.Context, string) error) *UserApp_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *UserApp) GetUser(ctx context.Context, id string) (*entities.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserApp_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type UserApp_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UserApp_Expecter) GetUser(ctx interface{}, id interface{}) *UserApp_GetUser_Call {
	return &UserApp_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *UserApp_GetUser_Call) Run(run func(ctx context.Context, id string)) *UserApp_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserApp_GetUser_Call) Return(_a0 *entities.User, _a1 error) *UserApp_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserApp_GetUser_Call) RunAndReturn(run func(context.Context, string) (*entities.User, error)) *UserApp_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, user
func (_m *UserApp) UpdateUser(ctx context.Context, user *entities.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserApp_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserApp_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *entities.User
func (_e *UserApp_Expecter) UpdateUser(ctx interface{}, user interface{}) *UserApp_UpdateUser_Call {
	return &UserApp_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, user)}
}

func (_c *UserApp_UpdateUser_Call) Run(run func(ctx context.Context, user *entities.User)) *UserApp_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.User))
	})
	return _c
}

func (_c *UserApp_UpdateUser_Call) Return(_a0 error) *UserApp_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserApp_UpdateUser_Call) RunAndReturn(run func(context.Context, *entities.User) error) *UserApp_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserApp creates a new instance of UserApp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserApp(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserApp {
	mock := &UserApp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
